#!/usr/bin/env zsh
# WARNING:
# THIS FILE IS MANAGED BY LH ZSH
# MODIFICATIONS WILL ONLY STAY TILL THE NEXT UPDATE!

# Configuration Variables
LHZSH_INSTBASE="$HOME/.lhzsh"
LHZSH_BASEURL="https://zsh.onlh.de"

# Source custom start script if it exists
[[ -f "$HOME/.lhzsh.custom/start.zsh" ]] && source "$HOME/.lhzsh.custom/start.zsh"

# Check required commands for update functionality without locking out the user.
update_check_enabled=true
for cmd in curl; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "Warning: $cmd is not installed. Update check will be skipped." >&2
        update_check_enabled=false
    fi
done

# Function to check and apply updates once per day
check_for_updates() {
    # Skip update check if flagged
    if [[ -n "$NOTRECOMENDED_DONTUPDATE" ]]; then
        return
    fi

    # Define file to record the last successful update check date
    local last_check_file="${LHZSH_INSTBASE}/.last_update_check"
    local current_date
    current_date=$(date +%Y-%m-%d)

    # If the last successful update check was today, skip checking again.
    if [[ -f "$last_check_file" ]]; then
        local last_check_date
        last_check_date=$(<"$last_check_file")
        if [[ "$last_check_date" == "$current_date" ]]; then
            return
        fi
    fi

    # Fetch local version if available
    local version_file="${LHZSH_INSTBASE}/version"
    local local_ver=""
    [[ -f "$version_file" ]] && local_ver=$(<"$version_file")

    # Attempt to fetch the remote version from the base URL.
    # Remove control characters to avoid JSON parsing issues.
    local remote_ver
    remote_ver=$(curl -s "${LHZSH_BASEURL}/latest_version" | tr -d '\000-\031')
    if [[ $? -ne 0 || -z "$remote_ver" ]]; then
        echo "WARN: Update check failed (no internet or bad response)!" >&2
        return
    fi

    # If you expect remote_ver to have a particular format (e.g. a commit SHA),
    # you can validate it here. For example, if it's a 40-character SHA, uncomment:
    # if [[ ! "$remote_ver" =~ ^[0-9a-f]{40}$ ]]; then
    #     echo "WARN: Remote version format invalid. Skipping update check." >&2
    #     return
    # fi

    # Mark the update check as successful for today.
    printf "%s" "$current_date" > "$last_check_file"

    # Proceed with update prompt if remote version differs from local version.
    if [[ "$local_ver" != "$remote_ver" ]]; then
        echo "A new version of Leon's zsh config is available."
        echo "This will delete any custom configuration."
        read -r "response?Would you like to update? (Y/n) "
        if [[ -z "$response" || "$response" =~ ^[Yy]$ ]]; then
            echo "Updating lhzsh to version $remote_ver"
            # Note: Changelog functionality has been omitted when using this endpoint.
            printf "%s" "$remote_ver" > "$version_file"
            bash <(curl -s "${LHZSH_BASEURL}/zsh.sh")
            exec zsh
        else
            echo "Update canceled."
        fi
    fi
}

# Run update check only if dependencies are available
if $update_check_enabled; then
    check_for_updates
fi

# Extend PATH
export PATH="$PATH:$HOME/.local/bin"

# Configure Oh-My-Zsh
export ZSH="${LHZSH_INSTBASE}/oh-my-zsh"
zstyle ':omz:update' mode auto    # Update automatically without asking
zstyle ':omz:update' frequency 30   # Auto-update frequency in days

# Detect distribution for plugins
if [[ -f /etc/arch-release ]]; then
    DISTROPLUGIN="archlinux"
elif command -v dnf >/dev/null; then
    DISTROPLUGIN="dnf"
elif [[ -f /etc/debian_version ]]; then
    DISTROPLUGIN="debian"
else
    DISTROPLUGIN=""
fi

plugins=(git docker docker-compose systemd vscode zoxide $DISTROPLUGIN)

# Source custom plugins script if it exists
[[ -f "$HOME/.lhzshrc.custom/plugins.zsh" ]] && source "$HOME/.lhzshrc.custom/plugins.zsh"

# Load oh-my-zsh
source "$ZSH/oh-my-zsh.sh"

# Initialize prompt with oh-my-posh if available
if command -v oh-my-posh >/dev/null 2>&1; then
    eval "$(oh-my-posh init zsh --config "${LHZSH_INSTBASE}/theme.omp.json")"
else
    echo "oh-my-posh not found. Using default prompt."
fi

# Alias and additional configuration
alias cd=z

# Greet the user if in interactive mode
if [[ -o interactive ]]; then
    echo
    if command -v fastfetch >/dev/null 2>&1; then
        fastfetch
    else
        echo "fastfetch not installed."
    fi
fi

# Source custom end script if it exists
[[ -f "$HOME/.lhzshrc.custom/end.zsh" ]] && source "$HOME/.lhzshrc.custom/end.zsh"

# Cleanup environment variables
unset LHZSH_INSTBASE LHZSH_BASEURL

# WARNING:
# THIS FILE IS MANAGED BY LH ZSH
# MODIFICATIONS WILL ONLY STAY TILL THE NEXT UPDATE!
